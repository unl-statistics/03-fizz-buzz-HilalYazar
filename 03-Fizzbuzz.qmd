---
title: "Homework: Fizzbuzz"
author: "Hilal Yazar Gunes"
format: html
---

Instructions: 

- You can answer the questions below in either R or Python. I will give you 50% extra credit if you provide answers in both languages. Otherwise, please feel free to delete the code chunks corresponding to the language you don't wish to work in.

- Once you have finished this assignment, render the document (Ctrl/Cmd-Shift-K or the Render button). 
- Commit the qmd file and any other files you have changed to the repository and push your changes.
- In Canvas, submit a link to your github repository containing the updated files.

# Introduction to Fizzbuzz

The "FizzBuzz Test" is a famous programming interview question.

> Write a program that prints the numbers from 1 to 30. But for multiples of three print "Fizz" instead of the number and for the multiples of five print "Buzz". For numbers which are multiples of both three and five print "FizzBuzz"

Start by filling in the following table for the numbers 1:30 manually, to get a feel for the task.

| Input | Output |
|-------|--------|
| 1     |   1    |
| 2     |   2    |
| 3     |  Fizz  |
| 4     |   4    |
| 5     |  Buzz  |
| 6     |  Fizz  |
| 7     |   7    |
| 8     |   8    |
| 9     |  Fizz  |
| 10    |  Buzz  |
| 11    |   11   |
| 12    |  Fizz  |
| 13    |   13   |
| 14    |   14   |
| 15    |FizzBuzz|
| 16    |   16   |
| 17    |   17   |
| 18    |  Fizz  |
| 19    |   19   |
| 20    |  Buzz  |
| 21    |  Fizz  |
| 22    |   22   |
| 23    |   23   |
| 24    |  Fizz  |
| 25    |  Buzz  |
| 26    |   26   |
| 27    |  Fizz  |
| 28    |   28   |
| 29    |   29   |
| 30    |FizzBuzz|

: Fizzbuzz for 1:30

On paper or using a tool such as [https://excalidraw.com](https://excalidraw.com), create a program flow map for the sequence of if-statements you need to evaluate for fizzbuzz. Add the picture to the folder containing this file, and name the picture flowchart.png. Add the picture to Git and commit/push your changes. 

![Program Flow map for FizzBuzz](flowchart.png)

In the chunk below, write code which will solve this problem for a single value `x`. You should be able to change the value of x at the top of the chunk and still get the correct answer.

```{r solo-fizzbuzz-r, echo = T}
x <- 3

# FizzBuzz code goes here

if (x %% 3 == 0 && x %% 5 == 0) {
  print("FizzBuzz")
} else if (x %% 3 == 0) {
  print("Fizz")
} else if (x %% 5 == 0) {
  print("Buzz")
} else {
  print(x)
}

```


```{python solo-fizzbuzz-py, echo = T}
x = 3

# FizzBuzz code goes here

if x % 3 == 0 and x % 5 == 0:
    print("FizzBuzz")
elif x % 3 == 0:
    print("Fizz")
elif x % 5 == 0:
    print("Buzz")
else:
    print(x)
```

Modify the code above so that the result is stored in a value `y`.

```{r solo-fizzbuzz-stored-r, echo = T}
x <- 3
y <- NA
# FizzBuzz code goes here

if (x %% 3 == 0 && x %% 5 == 0) {
  y <- "FizzBuzz"
} else if (x %% 3 == 0) {
  y <- "Fizz"
} else if (x %% 5 == 0) {
  y <- "Buzz"
} else {
  y <- as.character(x)
}


print(paste("For x = ", x, " my code produces ", y, sep = ""))
```


```{python solo-fizzbuzz-stored-py, echo = T}
import numpy as np
x = 3
y = np.nan

# FizzBuzz code goes here

if x % 3 == 0 and x % 5 == 0:
    y = "FizzBuzz"
elif x % 3 == 0:
    y = "Fizz"
elif x % 5 == 0:
    y = "Buzz"
else:
    y = str(x)

print("For x = "+ str(x)+ " my code produces "+ str(y))
```


# A vector of FizzBuzz

The code in the previous problem only solves FizzBuzz for a single value of `x`. Extend your code using a loop so that it will work for all values in a vector `xx`, storing values in a corresponding vector `yy`.

You can copy/paste code from previous chunks to make this chunk easier.

```{r vector-fizzbuzz-r, echo = T}
xx <- 1:30
yy <- rep(NA, times = 30)

# FizzBuzz code goes here

for (i in 1:length(xx)) {
  x <- xx[i]  # Current value of x
  if (x %% 3 == 0 && x %% 5 == 0) {
    yy[i] <- "FizzBuzz"
  } else if (x %% 3 == 0) {
    yy[i] <- "Fizz"
  } else if (x %% 5 == 0) {
    yy[i] <- "Buzz"
  } else {
    yy[i] <- as.character(x)
  }
}

# Printing the results in a data frame
res <- cbind(x = xx, result = yy)
res
```

```{python vector-fizzbuzz-py, echo = T}

import pandas as pd

xx = np.array(range(30)) + 1
yy = [np.nan]*30

# FizzBuzz code
for i in range(len(xx)):
    x = xx[i]  # Current value of x
    if x % 3 == 0 and x % 5 == 0:
        yy[i] = "FizzBuzz"
    elif x % 3 == 0:
        yy[i] = "Fizz"
    elif x % 5 == 0:
        yy[i] = "Buzz"
    else:
        yy[i] = str(x)

# Printing the results in a data frame
res = pd.DataFrame({"x": xx, "result": yy})
res

```

# Functions and FizzBuzz

In the previous question, you extended your fizzbuzz code to iterate through a vector `xx` and produce a result `yy`. Can you generalize this, writing a function `fizzbuzz` that takes a variable `x` and returns a corresponding fizzbuzzified variable? Your function should be able to handle `x` that is a vector or a scalar value, and should store your solution in `yy`.

```{r function-fizzbuzz-r}
xx <- sample(1:100, 10) # get a random xx
yy <- rep(NA, 10)

# FizzBuzz function definition
fizzbuzz <- function(x) {
  # Create an empty vector to store results
  result <- character(length(x))
  
  # Apply FizzBuzz logic
  for (i in 1:length(x)) {
    if (x[i] %% 3 == 0 & x[i] %% 5 == 0) {
      result[i] <- "FizzBuzz"
    } else if (x[i] %% 3 == 0) {
      result[i] <- "Fizz"
    } else if (x[i] %% 5 == 0) {
      result[i] <- "Buzz"
    } else {
      result[i] <- as.character(x[i])  # Return the number as a string
    }
  }
  
  return(result)
}


#Apply FizzBuzz function
yy <- fizzbuzz(x = xx)   

# Print results in a data frame
res <- data.frame(x = xx, result = yy)
print(res)


#To test the function

# Test cases
if (fizzbuzz(4) == "4") {  # Compare the output to the expected string
  print("Test passed: 4 is 4.")
} else {
  print("Test failed: 4 should be 4.")
}

if (fizzbuzz(3) == "Fizz") {  # Compare the output to "Fizz"
  print("Test passed: 3 is Fizz.")
} else {
  print("Test failed: 3 should be Fizz.")
}

if (all(fizzbuzz(c(2, 3, 4)) == c("2", "Fizz", "4"))) {  # Check vector inputs
  print("Test passed for vector input.")
} else {
  print("Test failed for vector input.")
}


#or

#to check the function manually what happens
fizzbuzz(4)
fizzbuzz(6)
```

```{python function-fizzbuzz-py}
import numpy as np
import pandas as pd
from random import choices

# FizzBuzz function definition
def fizzbuzz(x):
    y = []  # This will hold the results
    for i in range(len(x)):
        if x[i] % 3 == 0 and x[i] % 5 == 0:
            y.append("FizzBuzz")
        elif x[i] % 3 == 0:
            y.append("Fizz")
        elif x[i] % 5 == 0:
            y.append("Buzz")
        else:
            y.append(str(x[i]))  # Return the number as a string
    return y

# Generate random numbers between 1 and 100 using numpy
xx = np.array(choices(range(100), k=10)) + 1  # Generate random numbers
yy = fizzbuzz(xx)

# Printing the results in a data frame
res = pd.DataFrame({"x": xx, "y": yy})
print(res)

# Test cases
if fizzbuzz([4]) == ["4"]:
    print("Test passed: 4 is 4.")
else:
    print("Test failed: 4 should be 4.")

if fizzbuzz([3]) == ["Fizz"]:
    print("Test passed: 3 is Fizz.")
else:
    print("Test failed: 3 should be Fizz.")

if fizzbuzz([2, 3, 4]) == ["2", "Fizz", "4"]:
    print("Test passed for vector input.")
else:
    print("Test failed for vector input.")

# You can also manually check the function outputs
print(fizzbuzz([4]))  # Should output "4"
print(fizzbuzz([6]))  # Should output "Fizz"


```

# Defensive Programming

You cannot always assume that the person using your functions knows what they're doing. Add a check to the function you wrote in the last question so that it will handle non-numeric input by issuing an error message.

In R, you can use the function [`stopifnot()` to halt function execution if there is an error](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/stopifnot); this will give you a basic error message. 

```{r stopifnotdemo, error = T}
#Demo
stopifnot(2 > 3)

#Apply FizzBuzz function
yy <- fizzbuzz(x = xx)   

# Print results in a data frame
res <- data.frame(x = xx, result = yy)
print(res)


xx <- sample(1:100, 10) # get a random xx
yy <- rep(NA, 10)

# FizzBuzz function definition
fizzbuzz <- function(x) {
   # Check if input is numeric using stopifnot
  stopifnot(is.numeric(x))  # Stops if x is not numeric
  # Create an empty vector to store results
  result <- character(length(x))
  
  # Apply FizzBuzz logic
  for (i in 1:length(x)) {
    if (x[i] %% 3 == 0 & x[i] %% 5 == 0) {
      result[i] <- "FizzBuzz"
    } else if (x[i] %% 3 == 0) {
      result[i] <- "Fizz"
    } else if (x[i] %% 5 == 0) {
      result[i] <- "Buzz"
    } else {
      result[i] <- as.character(x[i])  # Return the number as a string
    }
  }
  
  return(result)
}


#Apply FizzBuzz function
yy <- fizzbuzz(x = xx)   

# Print results in a data frame
res <- data.frame(x = xx, result = yy)
print(res)

#To try if it works or not. Used "L" which is non-numeric

fizzbuzz("L") # that gave me an error code

```

In Python, you can use a [`try:` statement with a `except:` clause](https://docs.python.org/3/tutorial/errors.html#handling-exceptions). This functions like an if-else statement, where if no error occurs, the except statement is never executed.

```{python tryexceptdemo, error = T}
try: 
  int("hello")
except ValueError: 
  print("Error: could not turn value into an integer")

import pandas as pd
import random

# FizzBuzz function with defensive programming
def fizzbuzz(x):
    try:
        # Ensure the input is numeric
        if not all(isinstance(i, (int, float)) for i in x):
            raise ValueError("Input must be a list or array of numeric values")
        
        y = []  # This will hold the results
        for i in range(len(x)):
            if x[i] % 3 == 0 and x[i] % 5 == 0:
                y.append("FizzBuzz")
            elif x[i] % 3 == 0:
                y.append("Fizz")
            elif x[i] % 5 == 0:
                y.append("Buzz")
            else:
                y.append(str(x[i]))  # Return the number as a string
            
        return y
    except ValueError as e:
        print(f"Error: {e}")
        return [None] * len(x)  # Return None if there's an error
    except TypeError as e:
        print(f"TypeError: {e}")
        return [None] * len(x)  # Return None if there's an error

# Generate random numbers using Python's standard random module
xx = random.choices(range(1, 101), k=10)  # Generate random numbers between 1 and 100
print(f"Generated input list: {xx}")

# Apply the FizzBuzz function
yy = fizzbuzz(xx)
print(f"FizzBuzz output: {yy}")

# Create and print the DataFrame
res = pd.DataFrame({"x": xx, "y": yy})
print(res)


# Test cases for non-numeric input
print(fizzbuzz(["L", 5, 15]))  # This will raise an error because "L" is not numeric
print(fizzbuzz([6]))  # Should return ["Fizz"]
print(fizzbuzz([15]))  # Should return ["FizzBuzz"]


```

See more examples of this in the [Input Validation](https://srvanderplas.github.io/stat-computing-r-python/part-gen-prog/05-functions.html#input-validation) section of the textbook.


```{r function-error-fizzbuzz-r, error=TRUE}
xx <- sample(1:100, 10) # get a random xx
yy <- rep(NA, 10)

fizzbuzz <- function(x) {
  #Input validation using if() and stop() for custom error messages
  if (!is.numeric(x)) {
    stop("Error: The input must be a numeric vector.")
  }
  
  # Create an empty vector to store the results
  result <- character(length(x))
  
  # Apply FizzBuzz logic
  for (i in 1:length(x)) {
    if (x[i] %% 3 == 0 & x[i] %% 5 == 0) {
      result[i] <- "FizzBuzz"
    } else if (x[i] %% 3 == 0) {
      result[i] <- "Fizz"
    } else if (x[i] %% 5 == 0) {
      result[i] <- "Buzz"
    } else {
      result[i] <- as.character(x[i])  # Return the number as a string
    }
  }
  
  return(result)  # Return the FizzBuzz results
}


yy <- fizzbuzz(x = xx)

# Printing the results in a data frame
res <- cbind(x = xx, result = yy)
res

# Test the function with a non-numeric input
fizzbuzz("L")  # This will trigger a custom error

```

```{python function-error-fizzbuzz-py, error = T}
import pandas as pd
import numpy as np
from random import choices

# Generate random numbers between 1 and 100
xx = np.array(choices(range(100), k=10)) + 1

# FizzBuzz function with custom error handling
def fizzbuzz(x):
    # Input validation: Check if all elements in the input are numeric
    if not all(isinstance(i, (int, float)) for i in x):
        raise ValueError("Error: The input must be a list or array of numeric values")
    
    y = []  # This will hold the FizzBuzz results
    
    # Apply FizzBuzz logic
    for i in range(len(x)):
        if x[i] % 3 == 0 and x[i] % 5 == 0:
            y.append("FizzBuzz")
        elif x[i] % 3 == 0:
            y.append("Fizz")
        elif x[i] % 5 == 0:
            y.append("Buzz")
        else:
            y.append(str(x[i]))  # Return the number as a string
    
    return y

# Apply the FizzBuzz function
yy = fizzbuzz(x=xx)

# Create a DataFrame and print the results
res = pd.DataFrame({"x": xx, "result": yy})
print(res)

# Test the function with non-numeric input to trigger the error
try:
    fizzbuzz(["L"])
except ValueError as e:
    print(e)  # Custom error message for non-numeric input

```
